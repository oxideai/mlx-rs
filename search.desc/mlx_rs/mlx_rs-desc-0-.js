searchState.loadedDescShard("mlx_rs", 0, "A marker trait for array elements.\nRepresentation of a Device in MLX.\nType of device.\nArray element type\nAn iterator over the variants of Dtype\nA helper trait to construct <code>Array</code> from nested arrays or …\nA helper trait to construct <code>Array</code> from scalar values.\nA stream of evaluation attached to a particular device.\nParameter type for all MLX operations.\nA helper macro to create an array with up to 3 dimensions.\nCurrent default CPU stream.\nFast Fourier Transform (FFT) and its inverse (IFFT) for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent default GPU stream.\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReal portion of the complex number\nSet the default device.\nStop gradients from being computed.\nStop gradients from being computed.\nError associated with <code>Array::try_as_slice()</code>\nThe output dtype does not match the data type of the array.\nThe underlying data pointer is null.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOne dimensional discrete Fourier Transform.\nTwo dimensional discrete Fourier Transform.\nTwo dimensional discrete Fourier Transform.\nOne dimensional discrete Fourier Transform.\nn-dimensional discrete Fourier Transform.\nn-dimensional discrete Fourier Transform.\nOne dimensional inverse discrete Fourier Transform.\nTwo dimensional inverse discrete Fourier Transform.\nTwo dimensional inverse discrete Fourier Transform.\nOne dimensional inverse discrete Fourier Transform.\nn-dimensional inverse discrete Fourier Transform.\nn-dimensional inverse discrete Fourier Transform.\nThe inverse of <code>rfft()</code>.\nThe inverse of <code>rfft2()</code>.\nThe inverse of <code>rfft2()</code>.\nThe inverse of <code>rfft()</code>.\nThe inverse of <code>rfftn()</code>.\nThe inverse of <code>rfftn()</code>.\nOne dimensional discrete Fourier Transform on a real input.\nTwo-dimensional real discrete Fourier Transform.\nTwo-dimensional real discrete Fourier Transform.\nOne dimensional discrete Fourier Transform on a real input.\nn-dimensional real discrete Fourier Transform.\nn-dimensional real discrete Fourier Transform.\nCompute the Cholesky decomposition of a real symmetric …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompute the inverse of a square matrix. Returns an error …\nCompute the inverse of a square matrix. Returns an error …\nMatrix or vector norm.\nMatrix or vector norm.\nMatrix or vector norm.\nMatrix or vector norm.\nThe QR factorization of the input matrix. Returns an error …\nThe QR factorization of the input matrix. Returns an error …\nThe Singular Value Decomposition (SVD) of the input …\nThe Singular Value Decomposition (SVD) of the input …\nA custom trait for the bound of the clip operation.\nElement-wise absolute value.\nElement-wise absolute value.\nElement-wise inverse cosine.\nElement-wise inverse cosine.\nElement-wise inverse hyperbolic cosine.\nElement-wise inverse hyperbolic cosine.\nSee <code>Array::add</code>.\nSee <code>Array::add</code>.\nMatrix multiplication with addition and optional scaling.\nMatrix multiplication with addition and optional scaling.\nSee <code>Array::all</code>\nSee <code>Array::all_close</code>\nSee <code>Array::all_close</code>\nSee <code>Array::all</code>\nSee <code>Array::any</code>\nSee <code>Array::any</code>\nSee <code>Array::arange</code>\nSee <code>Array::arange</code>\nReturns the indices that partition the array. Returns an …\nReturns the indices that partition the flattened array. …\nReturns the indices that partition the flattened array. …\nReturns the indices that partition the array. Returns an …\nReturns the indices that sort the array. Returns an error …\nReturns the indices that sort the flattened array. Returns …\nReturns the indices that sort the flattened array. Returns …\nReturns the indices that sort the array. Returns an error …\nSee <code>Array::array_eq</code>\nSee <code>Array::array_eq</code>\nCreate a view into the array with the given shape and …\nCreate a view into the array with the given shape and …\nElement-wise inverse sine.\nElement-wise inverse sine.\nElement-wise inverse hyperbolic sine.\nElement-wise inverse hyperbolic sine.\nConvert array to have at least one dimension.\nConvert array to have at least one dimension.\nConvert array to have at least two dimensions.\nConvert array to have at least two dimensions.\nConvert array to have at least three dimensions.\nConvert array to have at least three dimensions.\nElement-wise inverse tangent.\nElement-wise inverse tangent.\nElement-wise inverse hyperbolic tangent.\nElement-wise inverse hyperbolic tangent.\nMatrix multiplication with block masking.\nMatrix multiplication with block masking.\nBroadcast a vector of arrays against one another. Returns …\nBroadcast a vector of arrays against one another. Returns …\nBroadcast an array to the given shape. Returns an error if …\nBroadcast an array to the given shape. Returns an error if …\nElement-wise ceiling.\nElement-wise ceiling.\nClip the values of the array between the given minimum and …\nClip the values of the array between the given minimum and …\nConcatenate the arrays along the given axis. Returns an …\nConcatenate the arrays along the given axis. Returns an …\n1D convolution over an input with several channels …\n1D convolution over an input with several channels …\n2D convolution over an input with several channels …\n2D convolution over an input with several channels …\nGeneral convolution over an input with several channels …\nGeneral convolution over an input with several channels …\nElement-wise cosine.\nElement-wise cosine.\nElement-wise hyperbolic cosine.\nElement-wise hyperbolic cosine.\nSee <code>Array::cummax</code>\nSee <code>Array::cummax</code>\nSee <code>Array::cummin</code>\nSee <code>Array::cummin</code>\nSee <code>Array::cumprod</code>\nSee <code>Array::cumprod</code>\nSee <code>Array::cumsum</code>\nSee <code>Array::cumsum</code>\nConvert angles from radians to degrees.\nConvert angles from radians to degrees.\nDequantize the matrix <code>w</code> using the provided <code>scales</code> and …\nDequantize the matrix <code>w</code> using the provided <code>scales</code> and …\nSee <code>Array::diag</code>\nSee <code>Array::diag</code>\nSee <code>Array::diagonal</code>\nSee <code>Array::diagonal</code>\nSee <code>Array::divide</code>.\nSee <code>Array::divide</code>.\nElement-wise quotient and remainder.\nElement-wise quotient and remainder.\nSee <code>Array::eq</code>\nSee <code>Array::eq</code>\nElement-wise error function.\nElement-wise error function.\nElement-wise inverse error function.\nElement-wise inverse error function.\nSee <code>Array::exp</code>.\nSee <code>Array::exp</code>.\nAdd a size one dimension at the given axis, returns an …\nAdd a size one dimension at the given axis, returns an …\nElement-wise exponential minus 1.\nElement-wise exponential minus 1.\nSee <code>Array::eye</code>\nSee <code>Array::eye</code>\nFlatten an array. Returns an error if the axes are invalid.\nFlatten an array. Returns an error if the axes are invalid.\nSee <code>Array::floor</code>.\nSee <code>Array::floor</code>.\nSee <code>Array::floor_divide</code>.\nSee <code>Array::floor_divide</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>Array::full</code>\nSee <code>Array::full</code>\nSee <code>Array::ge</code>\nSee <code>Array::ge</code>\nSee <code>Array::gt</code>\nSee <code>Array::gt</code>\nSee <code>Array::identity</code>\nSee <code>Array::identity</code>\nIndexing Arrays\nOrdinary inner product of vectors for 1-D arrays, in …\nOrdinary inner product of vectors for 1-D arrays, in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Array::is_close</code>\nSee <code>Array::is_close</code>\nReturn a boolean array indicating which elements are +/- …\nReturn a boolean array indicating which elements are +/- …\nReturn a boolean array indicating which elements are NaN.\nReturn a boolean array indicating which elements are NaN.\nReturn a boolean array indicating which elements are …\nReturn a boolean array indicating which elements are …\nReturn a boolean array indicating which elements are …\nReturn a boolean array indicating which elements are …\nSee <code>Array::le</code>\nSee <code>Array::le</code>\nSee <code>Array::linspace</code>\nSee <code>Array::linspace</code>\nSee <code>Array::log</code>.\nSee <code>Array::log10</code>.\nSee <code>Array::log10</code>.\nSee <code>Array::log1p</code>.\nSee <code>Array::log1p</code>.\nSee <code>Array::log2</code>.\nSee <code>Array::log2</code>.\nElement-wise log-add-exp.\nElement-wise log-add-exp.\nSee <code>Array::log</code>.\nSee <code>Array::log_sum_exp</code>\nSee <code>Array::log_sum_exp</code>\nSee <code>Array::logical_and</code>\nSee <code>Array::logical_and</code>\nSee <code>Array::logical_not</code>\nSee <code>Array::logical_not</code>\nSee <code>Array::logical_or</code>\nSee <code>Array::logical_or</code>\nSee <code>Array::lt</code>\nSee <code>Array::lt</code>\nSee <code>Array::matmul</code>.\nSee <code>Array::matmul</code>.\nSee <code>Array::max</code>\nSee <code>Array::max</code>\nElement-wise maximum.\nElement-wise maximum.\nSee <code>Array::mean</code>\nSee <code>Array::mean</code>\nSee <code>Array::min</code>\nSee <code>Array::min</code>\nElement-wise minimum.\nElement-wise minimum.\nMove an axis to a new position. Returns an error if the …\nMove an axis to a new position. Returns an error if the …\nSee <code>Array::multiply</code>.\nSee <code>Array::multiply</code>.\nSee <code>Array::ne</code>\nSee <code>Array::ne</code>\nSee <code>Array::negative</code>.\nSee <code>Array::negative</code>.\nSee <code>Array::ones</code>\nSee <code>Array::ones</code>\nCompute the outer product of two 1-D arrays, if the …\nCompute the outer product of two 1-D arrays, if the …\nPad an array with a constant value. Returns an error if …\nPad an array with a constant value. Returns an error if …\nReturns a partitioned copy of the array such that the …\nReturns a partitioned copy of the flattened array such …\nReturns a partitioned copy of the flattened array such …\nReturns a partitioned copy of the array such that the …\nSee <code>Array::power</code>.\nSee <code>Array::power</code>.\nSee <code>Array::prod</code>\nSee <code>Array::prod</code>\nQuantize the matrix <code>w</code> using <code>bits</code> bits per element.\nQuantize the matrix <code>w</code> using <code>bits</code> bits per element.\nPerform the matrix multiplication with the quantized …\nPerform the matrix multiplication with the quantized …\nConvert angles from degrees to radians.\nConvert angles from degrees to radians.\nSee <code>Array::reciprocal</code>.\nSee <code>Array::reciprocal</code>.\nSee <code>Array::remainder</code>.\nSee <code>Array::remainder</code>.\nSee <code>Array::repeat</code>\nSee <code>Array::repeat_all</code>\nSee <code>Array::repeat_all</code>\nSee <code>Array::repeat</code>\nReshape an array while preserving the size. Returns an …\nReshape an array while preserving the size. Returns an …\nSee <code>Array::round</code>.\nSee <code>Array::round</code>.\nSee <code>Array::rsqrt</code>.\nSee <code>Array::rsqrt</code>.\nElement-wise logistic sigmoid.\nElement-wise logistic sigmoid.\nElement-wise sign.\nElement-wise sign.\nSee <code>Array::sin</code>.\nSee <code>Array::sin</code>.\nElement-wise hyperbolic sine.\nElement-wise hyperbolic sine.\nPerform the softmax along the given axis.\nPerform the softmax along the given axis.\nReturns a sorted copy of the array. Returns an error if …\nReturns a sorted copy of the flattened array. Returns an …\nReturns a sorted copy of the flattened array. Returns an …\nReturns a sorted copy of the array. Returns an error if …\nSplit an array along a given axis. Returns an error if the …\nSplit an array along a given axis. Returns an error if the …\nSplit an array into equal parts along a given axis. …\nSplit an array into equal parts along a given axis. …\nSee <code>Array::sqrt</code>.\nSee <code>Array::sqrt</code>.\nSee <code>Array::square</code>.\nSee <code>Array::square</code>.\nRemove length one axes from an array. Returns an error if …\nRemove length one axes from an array. Returns an error if …\nStacks the arrays along a new axis. Returns an error if …\nStacks the arrays along a new axis. Returns an error if …\nStacks the arrays along a new axis. Returns an error if …\nStacks the arrays along a new axis. Returns an error if …\nCompute the standard deviation(s) over the given axes.\nCompute the standard deviation(s) over the given axes.\nSee <code>Array::subtract</code>.\nSee <code>Array::subtract</code>.\nSee <code>Array::sum</code>\nSee <code>Array::sum</code>\nSwap two axes of an array. Returns an error if the axes …\nSwap two axes of an array. Returns an error if the axes …\nSee [<code>Array::tan</code>].\nSee [<code>Array::tan</code>].\nElement-wise hyperbolic tangent.\nElement-wise hyperbolic tangent.\nCompute the tensor dot product along the specified axes.\nCompute the tensor dot product along the specified axes.\nConstruct an array by repeating <code>a</code> the number of times …\nConstruct an array by repeating <code>a</code> the number of times …\nTranspose the dimensions of the array. Returns an error if …\nTranspose the dimensions of the array. Returns an error if …\nSee <code>Array::tri</code>\nSee <code>Array::tri</code>\nSee <code>Array::variance</code>\nSee <code>Array::variance</code>\nSelect from <code>a</code> or <code>b</code> according to <code>condition</code> returning an …\nSelect from <code>a</code> or <code>b</code> according to <code>condition</code> returning an …\nAlias for [<code>r#where</code>]\nAlias for [<code>r#where</code>]\nSee <code>Array::zeros</code>\nSee <code>Array::zeros</code>\nTrait for custom indexing operations.\nAn <code>Ellipsis</code> is used to consume all axes\nNew axis operation\nA marker trait for range bounds that are <code>i32</code>.\nIndexing with a range\nIndexing with an array\nA single index operation\nIndices of the maximum values along the axis.\nIndices of the maximum value over the entire array.\nIndices of the maximum value over the entire array.\nIndices of the maximum values along the axis.\nIndices of the minimum values along the axis.\nIndices of the minimum value over the entire array.\nIndices of the minimum value over the entire array.\nIndices of the minimum values along the axis.\nReturns the indices that partition the array.\nReturns the indices that partition the flattened array.\nReturns the indices that partition the flattened array.\nReturns the indices that partition the array.\nReturns the indices that sort the array.\nReturns the indices that sort the flattened array.\nReturns the indices that sort the flattened array.\nReturns the indices that sort the array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>mlx</code> allows out of bounds indexing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Array::take</code>\nSee <code>Array::take_all</code>\nSee <code>Array::take_all</code>\nSee <code>Array::take_along_axis</code>\nSee <code>Array::take_along_axis</code>\nSee <code>Array::take</code>\nReturns the <code>k</code> largest elements from the input along a …\nReturns the <code>k</code> largest elements from the flattened input …\nReturns the <code>k</code> largest elements from the flattened input …\nReturns the <code>k</code> largest elements from the input along a …\nArray element type\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nParameter type for all MLX operations.\nElement-wise absolute value.\nElement-wise absolute value.\nElement-wise addition returning an error if arrays are not …\nElement-wise addition returning an error if arrays are not …\nAn <code>and</code> reduction over the given axes returning an error if …\nApproximate comparison of two arrays returning an error if …\nApproximate comparison of two arrays returning an error if …\nAn <code>and</code> reduction over the given axes returning an error if …\nAn <code>or</code> reduction over the given axes returning an error if …\nAn <code>or</code> reduction over the given axes returning an error if …\nGenerates ranges of numbers.\nGenerates ranges of numbers.\nArray equality check.\nArray equality check.\nReturns a slice of the array data. This method requires a …\nReturns a slice of the array data without validating the …\nSee <code>as_strided</code>\nSee <code>as_strided</code>\nCreate a new array with the contents converted to the …\nCreate a new array with the contents converted to the …\nSee <code>at_least_1d</code>\nSee <code>at_least_1d</code>\nSee <code>at_least_2d</code>\nSee <code>at_least_2d</code>\nSee <code>at_least_3d</code>\nSee <code>at_least_3d</code>\nElement-wise cosine\nElement-wise cosine\nCurrent default CPU stream.\nReturn the cumulative maximum of the elements along the …\nReturn the cumulative maximum of the elements along the …\nReturn the cumulative minimum of the elements along the …\nReturn the cumulative minimum of the elements along the …\nReturn the cumulative product of the elements along the …\nReturn the cumulative product of the elements along the …\nReturn the cumulative sum of the elements along the given …\nReturn the cumulative sum of the elements along the given …\nClone the array by copying the data.\nThe default stream on the default device.\nExtract a diagonal or construct a diagonal matrix.\nExtract a diagonal or construct a diagonal matrix.\nReturn specified diagonals.\nReturn specified diagonals.\nThe shape of the array in a particular dimension.\nElement-wise division returning an error if arrays are not …\nElement-wise division returning an error if arrays are not …\nThe array element type.\nArray equality check.\nElement-wise equality returning an error if the arrays are …\nElement-wise equality returning an error if the arrays are …\nEvaluate the array.\nElement-wise exponential.\nElement-wise exponential.\nSee <code>expand_dims</code>.\nSee <code>expand_dims</code>.\nCreate an identity matrix or a general diagonal matrix …\nCreate an identity matrix or a general diagonal matrix …\nSee <code>flatten</code>.\nSee <code>flatten</code>.\nElement-wise floor returning an error if the array is of …\nElement-wise floor returning an error if the array is of …\nElement-wise integer division returning an error if arrays …\nElement-wise integer division returning an error if arrays …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNew array from a bool scalar.\nNew array from a complex scalar.\nNew array from a float scalar.\nNew array from an int scalar.\nNew array from an iterator.\nCreate a new array from an existing mlx_array pointer.\nNew array from existing buffer.\nConstruct an array with the given value returning an error …\nConstruct an array with the given value returning an error …\nElement-wise greater than or equal returning an error if …\nElement-wise greater than or equal returning an error if …\nCurrent default GPU stream.\nElement-wise greater than returning an error if the arrays …\nElement-wise greater than returning an error if the arrays …\nCreate a square identity matrix returning an error if …\nCreate a square identity matrix returning an error if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boolean array where two arrays are element-wise …\nReturns a boolean array where two arrays are element-wise …\nAccess the value of a scalar array. If <code>T</code> does not match …\nThe size of the array’s datatype in bytes.\nAccess the value of a scalar array without validating the …\nElement-wise less than or equal returning an error if the …\nElement-wise less than or equal returning an error if the …\nGenerate <code>num</code> evenly spaced numbers over interval …\nGenerate <code>num</code> evenly spaced numbers over interval …\nElement-wise natural logarithm.\nElement-wise base-10 logarithm.\nElement-wise base-10 logarithm.\nElement-wise natural log of one plus the array.\nElement-wise natural log of one plus the array.\nElement-wise base-2 logarithm.\nElement-wise base-2 logarithm.\nElement-wise natural logarithm.\nA <code>log-sum-exp</code> reduction over the given axes returning an …\nA <code>log-sum-exp</code> reduction over the given axes returning an …\nElement-wise logical and returning an error if the arrays …\nElement-wise logical and returning an error if the arrays …\nUnary element-wise logical not.\nUnary element-wise logical not.\nElement-wise logical or returning an error if the arrays …\nElement-wise logical or returning an error if the arrays …\nElement-wise less than returning an error if the arrays …\nElement-wise less than returning an error if the arrays …\nMatrix multiplication returning an error if inputs are not …\nMatrix multiplication returning an error if inputs are not …\nA <code>max</code> reduction over the given axes returning an error if …\nA <code>max</code> reduction over the given axes returning an error if …\nA <code>mean</code> reduction over the given axes returning an error if …\nA <code>mean</code> reduction over the given axes returning an error if …\nA <code>min</code> reduction over the given axes returning an error if …\nA <code>min</code> reduction over the given axes returning an error if …\nSee <code>move_axis</code>\nSee <code>move_axis</code>\nElement-wise multiplication returning an error if arrays …\nElement-wise multiplication returning an error if arrays …\nThe number of bytes in the array.\nThe array’s dimension.\nElement-wise not equal returning an error if the arrays …\nElement-wise not equal returning an error if the arrays …\nUnary element-wise negation. Returns an error if the array …\nUnary element-wise negation. Returns an error if the array …\nConstruct an array of ones returning an error if shape is …\nConstruct an array of ones returning an error if shape is …\nReturns <code>self</code> to the power <code>rhs</code>.\nElement-wise power operation returning an error if arrays …\nElement-wise power operation returning an error if arrays …\nA <code>product</code> reduction over the given axes returning an error …\nA <code>product</code> reduction over the given axes returning an error …\nElement-wise reciprocal.\nElement-wise reciprocal.\nElement-wise remainder of division returning an error if …\nElement-wise remainder of division returning an error if …\nRepeat an array along a specified axis returning an error …\nRepeat a flattened array along axis 0 returning an error …\nRepeat a flattened array along axis 0 returning an error …\nRepeat an array along a specified axis returning an error …\nSee <code>reshape</code>.\nSee <code>reshape</code>.\nRound to the given number of decimals.\nRound to the given number of decimals.\nElement-wise reciprocal and square root.\nElement-wise reciprocal and square root.\nThe shape of the array.\nElement-wise sine.\nElement-wise sine.\nNumber of elements in the array.\nSee <code>split</code>\nSee <code>split</code>\nSee <code>split_equal</code>\nSee <code>split_equal</code>\nElement-wise square root\nElement-wise square root\nElement-wise square.\nElement-wise square.\nSee <code>squeeze</code>.\nSee <code>squeeze</code>.\nThe strides of the array.\nElement-wise subtraction returning an error if arrays are …\nElement-wise subtraction returning an error if arrays are …\nSum reduce the array over the given axes returning an …\nSum reduce the array over the given axes returning an …\nSee <code>swap_axes</code>\nSee <code>swap_axes</code>\n<code>transpose</code> and unwrap the result.\nTake elements along an axis.\nTake elements from flattened 1-D array.\nTake elements from flattened 1-D array.\nTake values along an axis at the specified indices.\nTake values along an axis at the specified indices.\nTake elements along an axis.\nSee <code>transpose</code>\nSee <code>transpose</code>\nAn array with ones at and below the given diagonal and …\nAn array with ones at and below the given diagonal and …\nReturns a slice of the array data returning an error if …\nAccess the value of a scalar array returning an error if …\nCompute the variance(s) over the given axes returning an …\nCompute the variance(s) over the given axes returning an …\nView the array as a different type.\nView the array as a different type.\nConstruct an array of zeros returning an error if shape is …\nConstruct an array of zeros returning an error if shape is …\nShape or count for the categorical distribution.\nGenerate Bernoulli random values with a given <code>p</code> value.\nGenerate Bernoulli random values with a given <code>p</code> value.\nSample from a categorical distribution.\nSample from a categorical distribution.\nReturns the argument unchanged.\nSample from the standard Gumbel distribution.\nSample from the standard Gumbel distribution.\nCalls <code>U::from(self)</code>.\nGet a PRNG key from a seed.\nGenerate jointly-normal random samples given a mean and …\nGenerate jointly-normal random samples given a mean and …\nGenerate normally distributed random numbers.\nGenerate normally distributed random numbers.\nGenerate random integers from the given interval (<code>lower:</code> …\nGenerate random integers from the given interval (<code>lower:</code> …\nSeed the random number generator.\nSplit a PRNG key into two keys and return a tuple.\nSplit a PRNG key into two keys and return a tuple.\nGenerate values from a truncated normal distribution …\nGenerate values from a truncated normal distribution …\nGenerate uniformly distributed random numbers. The values …\nGenerate uniformly distributed random numbers. The values …\nAsynchronously evaluate an iterator of <code>Array</code>s.\nEvaluate an iterator of <code>Array</code>s.\nReturns a function which computes the gradient of <code>f</code>.\nCompute the Jacobian-vector product.\nSimilar to <code>jvp</code> but handles closures that can return an …\nReturns a function which computes the value and gradient …\nCompute the vector-Jacobian product.\nSimilar to <code>vjp</code> but handles closures that can return an …\nReturns a compiled function that produces the same output …\nGlobally disable the compilation of functions.\nGlobally enable the compilation of functions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA helper trait that is just like <code>Into&lt;Option&lt;T&gt;&gt;</code> but …")