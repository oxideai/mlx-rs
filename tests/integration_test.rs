// Integration tests comparing results vs known results from python
// This file is @generated by tools/generate_integration_tests.py

use mlx::{Array, Dtype};
use num_traits::Pow;
use pretty_assertions::assert_eq;
use std::ops::{Add, Div, Mul, Rem, Sub};

#[test]
fn test_add_op() {
    let a = Array::from_slice(
        &[
            -0.9942685961723328,
            1.5588475465774536,
            0.07676360756158829,
            0.7995404601097107,
            0.25824791193008423,
            -0.20347273349761963,
            0.4790516197681427,
            0.8649506568908691,
            0.1599719524383545,
            0.36283278465270996,
            0.7948763966560364,
            -0.2164890468120575,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -1.717735767364502,
            0.5396694540977478,
            0.5831512212753296,
            -0.11231160163879395,
            -0.4275527596473694,
            1.3414156436920166,
            -2.68961763381958,
            -0.7060123085975647,
            -0.5416353940963745,
            -0.2755124568939209,
            2.0183634757995605,
            -2.6572487354278564,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = &a + &b;
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_sub_op() {
    let a = Array::from_slice(
        &[
            0.4456065595149994,
            0.8109325766563416,
            -2.737128257751465,
            0.026788907125592232,
            -0.9458670020103455,
            1.003029704093933,
            0.5027061700820923,
            -0.809855043888092,
            -1.0444817543029785,
            -0.5955464839935303,
            1.933104395866394,
            -0.7432821393013,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.39970701932907104,
            0.36077868938446045,
            -1.2933684587478638,
            0.7009965777397156,
            0.4208550453186035,
            -1.0873934030532837,
            1.4981838464736938,
            -0.032719552516937256,
            0.8580451011657715,
            2.128019094467163,
            -1.5882117748260498,
            -0.8661250472068787,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = &a - &b;
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_mul_op() {
    let a = Array::from_slice(
        &[
            0.6043787002563477,
            0.7398632764816284,
            -0.19319845736026764,
            -0.5855217576026917,
            0.7080258131027222,
            0.47266295552253723,
            -0.48666927218437195,
            0.0984317809343338,
            1.0673989057540894,
            1.5220398902893066,
            -1.4919353723526,
            -0.5472767949104309,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.8316490054130554,
            -0.06528627127408981,
            1.2367907762527466,
            0.016168225556612015,
            2.074563503265381,
            0.9269281029701233,
            0.504088282585144,
            -0.6033192873001099,
            1.0803189277648926,
            1.6134089231491089,
            -0.012959674000740051,
            1.0246787071228027,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = &a * &b;
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_div_op() {
    let a = Array::from_slice(
        &[
            -0.2533402442932129,
            1.159876823425293,
            -0.7517694234848022,
            2.65189528465271,
            0.29459431767463684,
            1.0576568841934204,
            1.2937270402908325,
            0.9059038162231445,
            -0.13203659653663635,
            -0.3610113859176636,
            0.052795179188251495,
            0.3677670359611511,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.6262395977973938,
            -1.5733191967010498,
            0.4299872815608978,
            -0.062338754534721375,
            1.1675249338150024,
            -1.2348337173461914,
            0.49085870385169983,
            0.6335904598236084,
            0.6528098583221436,
            0.35910943150520325,
            0.9255160093307495,
            0.9743832945823669,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = &a / &b;
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_mod_op() {
    let a = Array::from_slice(
        &[
            -0.8113653659820557,
            -0.7642296552658081,
            -1.0113646984100342,
            0.4372778534889221,
            -0.03169655427336693,
            0.42641276121139526,
            -0.7548683285713196,
            0.004688323941081762,
            0.7859670519828796,
            0.5877021551132202,
            -0.8214616775512695,
            2.5643813610076904,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.3401983976364136,
            0.8392132520675659,
            0.16614510118961334,
            0.2445676177740097,
            1.8656243085861206,
            -1.4588404893875122,
            0.36395367980003357,
            -0.549224853515625,
            -1.7208513021469116,
            0.49372735619544983,
            1.033206820487976,
            -0.0393507219851017,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = &a % &b;
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_pow_op() {
    let a = Array::from_slice(
        &[
            0.22150959074497223,
            1.8410156965255737,
            1.548897385597229,
            0.7334198355674744,
            0.441251665353775,
            0.5487037301063538,
            0.7351315021514893,
            0.4545445740222931,
            1.5514036417007446,
            1.5093823671340942,
            0.6182904243469238,
            0.31907644867897034,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            1.5800622701644897,
            1.7776278257369995,
            0.5302109718322754,
            1.54470694065094,
            0.861287534236908,
            0.5307390689849854,
            1.6360782384872437,
            0.3754667341709137,
            0.6899919509887695,
            0.977148711681366,
            1.952046275138855,
            0.8902877569198608,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.pow(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_pow_op1() {
    let a = Array::from_slice(
        &[
            0.9202654957771301,
            0.6680494546890259,
            0.4415310323238373,
            0.9130102396011353,
            1.0048154592514038,
            1.9913296699523926,
            1.3810899257659912,
            1.1833419799804688,
            1.9574943780899048,
            1.3276519775390625,
            0.29155462980270386,
            0.8251072764396667,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.pow(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_equal_op() {
    let a = Array::from_slice(
        &[
            -0.32960444688796997,
            -0.6537326574325562,
            -1.0433701276779175,
            -1.3085211515426636,
            -0.5356408357620239,
            -1.5727643966674805,
            1.5463701486587524,
            0.9168468713760376,
            -0.29466772079467773,
            0.5877249240875244,
            1.0373533964157104,
            2.0602548122406006,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.3497368395328522,
            2.705657720565796,
            1.115473747253418,
            0.3208041787147522,
            0.19045226275920868,
            -0.6052948832511902,
            1.5662771463394165,
            0.9162980318069458,
            0.4221007227897644,
            -0.7861426472663879,
            2.722684383392334,
            1.1774588823318481,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.eq(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_equal_op1() {
    let a = Array::from_slice(
        &[
            -0.27364474534988403,
            -2.0359694957733154,
            0.8802146911621094,
            0.6562765836715698,
            0.016077375039458275,
            0.6222671866416931,
            -0.20905515551567078,
            -0.20364713668823242,
            -0.7296323180198669,
            1.2840242385864258,
            0.8312596082687378,
            0.5160540342330933,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.eq(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_not_equal_op() {
    let a = Array::from_slice(
        &[
            1.756608247756958,
            -0.771159291267395,
            0.48432931303977966,
            -0.06592994928359985,
            -0.29366448521614075,
            -0.8106083273887634,
            -2.0289864540100098,
            0.5482024550437927,
            -0.5597869753837585,
            0.24042139947414398,
            -0.6115961670875549,
            -0.7772627472877502,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.9059594869613647,
            0.4129054546356201,
            0.488437294960022,
            0.5264554619789124,
            -0.7654613852500916,
            0.08639021962881088,
            0.15022490918636322,
            -0.21099333465099335,
            0.1827475130558014,
            -0.3979078531265259,
            0.34863921999931335,
            -0.9510422945022583,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.ne(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), true);
}

#[test]
fn test_not_equal_op1() {
    let a = Array::from_slice(
        &[
            -0.42025861144065857,
            -0.040837619453668594,
            -0.13219469785690308,
            -0.5056518912315369,
            0.5841429829597473,
            0.5505485534667969,
            -0.5521378517150879,
            -0.3887931704521179,
            -0.974947988986969,
            0.07240211218595505,
            -0.367839515209198,
            0.6487535834312439,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.ne(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), true);
}

#[test]
fn test_less_than_op() {
    let a = Array::from_slice(
        &[
            -1.844752311706543,
            -0.7603026032447815,
            0.4479617476463318,
            -0.63111412525177,
            0.4282935559749603,
            -1.2082486152648926,
            -2.0770819187164307,
            1.753180742263794,
            -0.08789806813001633,
            0.4507797956466675,
            0.5508966445922852,
            -0.8400185108184814,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            2.2133309841156006,
            -0.23646940290927887,
            1.7838425636291504,
            0.7114862203598022,
            -0.3829001188278198,
            0.2747482359409332,
            -0.8585107922554016,
            2.953967332839966,
            -1.2868826389312744,
            -1.3592311143875122,
            -0.34337109327316284,
            2.0900237560272217,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.lt(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_less_than_op1() {
    let a = Array::from_slice(
        &[
            -0.38301488757133484,
            -1.127336859703064,
            0.2571295201778412,
            0.7313225865364075,
            -1.8896852731704712,
            -0.010559662245213985,
            1.0438321828842163,
            -0.10217265039682388,
            0.394415020942688,
            0.3411840498447418,
            0.35388246178627014,
            1.3512420654296875,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.lt(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_less_than_equal_op() {
    let a = Array::from_slice(
        &[
            -0.4812910258769989,
            -1.4695208072662354,
            -0.860399067401886,
            0.07418497651815414,
            -1.7218490839004517,
            -0.2624925374984741,
            -1.6834967136383057,
            -0.5945891737937927,
            0.15873660147190094,
            0.5970637798309326,
            -0.5366858243942261,
            -0.3708956837654114,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.027625970542430878,
            -1.1228505373001099,
            0.7520890831947327,
            0.8164361715316772,
            0.8286813497543335,
            -0.023344749584794044,
            0.6005622148513794,
            -0.23525094985961914,
            -0.3876871168613434,
            0.48362886905670166,
            1.4105278253555298,
            1.9633475542068481,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.le(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_less_than_equal_op1() {
    let a = Array::from_slice(
        &[
            1.2285120487213135,
            1.6177242994308472,
            -0.07461167126893997,
            -1.1410199403762817,
            0.08650599420070648,
            0.4281392991542816,
            1.2322219610214233,
            2.314495801925659,
            -0.9625819325447083,
            -0.5492739677429199,
            -0.7605679631233215,
            -1.563520908355713,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.le(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_greater_than_op() {
    let a = Array::from_slice(
        &[
            0.9528578519821167,
            0.7544600367546082,
            -0.6143341660499573,
            0.4361976981163025,
            -2.035684585571289,
            0.3106979727745056,
            1.2837309837341309,
            -1.0182132720947266,
            -2.706608533859253,
            -0.6995691061019897,
            -1.0764377117156982,
            0.29578927159309387,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.7487413883209229,
            -1.536310076713562,
            0.5375699400901794,
            -1.505436658859253,
            -0.08732903748750687,
            -0.1259618103504181,
            -1.0746420621871948,
            -0.5742952823638916,
            0.785736620426178,
            2.0599443912506104,
            -0.0739314928650856,
            -0.3609761595726013,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.gt(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_greater_than_op1() {
    let a = Array::from_slice(
        &[
            -0.6236390471458435,
            -0.945243775844574,
            -1.0052005052566528,
            -1.4991451501846313,
            -0.48237869143486023,
            0.5873527526855469,
            -0.6522650718688965,
            0.27232179045677185,
            0.20628224313259125,
            0.5878615975379944,
            -1.6699349880218506,
            0.44463956356048584,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.gt(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_greater_than_equal_op() {
    let a = Array::from_slice(
        &[
            -0.1228528842329979,
            -1.9689944982528687,
            0.24909189343452454,
            1.889959692955017,
            -0.7527332901954651,
            0.0162093173712492,
            -0.19870556890964508,
            -0.19894011318683624,
            -0.967091977596283,
            -0.7932254076004028,
            0.536598265171051,
            0.08344017714262009,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.17409177124500275,
            -0.7945227026939392,
            -0.4973922371864319,
            -1.029157042503357,
            0.605449914932251,
            -0.4754652976989746,
            0.6858373880386353,
            -0.5446027517318726,
            0.34858253598213196,
            -0.4406808316707611,
            -0.13155561685562134,
            0.38411036133766174,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.ge(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_greater_than_equal_op1() {
    let a = Array::from_slice(
        &[
            -1.034456491470337,
            -1.609849452972412,
            0.005640356335788965,
            -1.4993155002593994,
            1.6209396123886108,
            -0.8508660197257996,
            2.0341997146606445,
            -2.193882942199707,
            -0.7680956125259399,
            -0.3569386303424835,
            0.2639521658420563,
            1.1652497053146362,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = 1.3.into();
    let result = a.ge(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_abs() {
    let a = Array::from_slice(
        &[
            -0.2475477159023285,
            0.2737356722354889,
            -0.01621365174651146,
            2.044509172439575,
            0.37451961636543274,
            0.5477057695388794,
            -0.38457202911376953,
            -0.5888232588768005,
            -1.375052809715271,
            1.436511754989624,
            -0.2526337802410126,
            -1.3211520910263062,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.abs();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_all() {
    let a = Array::from_slice(
        &[
            0.4054608941078186,
            0.23464006185531616,
            0.05724736303091049,
            0.1054132804274559,
            -1.6751494407653809,
            -1.4076608419418335,
            -1.1101349592208862,
            0.020695272833108902,
            0.4689847528934479,
            -0.634335994720459,
            0.22030842304229736,
            -0.2220899760723114,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.all(None, None);
    assert_eq!(result.shape().is_empty(), true);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), true);
}

#[test]
fn test_all1() {
    let a = Array::from_slice(
        &[
            -0.34980204701423645,
            0.18403305113315582,
            0.4630385935306549,
            0.5012111067771912,
            -2.4028491973876953,
            0.7385044097900391,
            2.019850254058838,
            -0.4758227467536926,
            -0.7684582471847534,
            0.5396697521209717,
            -0.44005945324897766,
            -0.12454022467136383,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.all(&[-1][..], None);
    assert_eq!(result.shape(), &[4]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), true);
}

#[test]
fn test_all2() {
    let a = Array::from_slice(
        &[
            0.41264641284942627,
            0.9518300890922546,
            0.20660264790058136,
            0.5574396848678589,
            0.88541179895401,
            0.06129850447177887,
            0.1600731909275055,
            0.09510420262813568,
            0.5929766893386841,
            0.0907398983836174,
            0.8612719774246216,
            0.8740301728248596,
            0.43301934003829956,
            0.449133038520813,
            0.3803020119667053,
            0.8906132578849792,
            0.05458953231573105,
            0.008628114126622677,
            0.8474514484405518,
            0.15496826171875,
            0.1313934624195099,
            0.7091055512428284,
            0.5669554471969604,
            0.45264434814453125,
            0.09918950498104095,
            0.573127806186676,
            0.6144855618476868,
            0.6221802830696106,
            0.3839404284954071,
            0.4428270757198334,
            0.08020088076591492,
            0.22216182947158813,
            0.9855815768241882,
            0.3308600187301636,
            0.1978742480278015,
            0.32341161370277405,
            0.4726017713546753,
            0.6797925233840942,
            0.5607868432998657,
            0.7585954070091248,
            0.23215535283088684,
            0.5673006772994995,
            0.3499722480773926,
            0.9948192834854126,
            0.35738393664360046,
            0.6069805026054382,
            0.8984465599060059,
            0.396785706281662,
            0.3693981468677521,
            0.7655652165412903,
            0.2106977254152298,
            0.8895683288574219,
            0.8231656551361084,
            0.36517760157585144,
            0.350694477558136,
            0.9382088780403137,
            0.6975647211074829,
            0.7701937556266785,
            0.6443907022476196,
            0.28631868958473206,
            0.5755614638328552,
            0.9123266935348511,
            0.891536295413971,
            0.04641114920377731,
            0.13980698585510254,
            0.8856686949729919,
            0.26550811529159546,
            0.08521559834480286,
            0.08357948064804077,
            0.8300994634628296,
            0.8651272654533386,
            0.39900529384613037,
        ],
        &[2, 3, 4, 3],
    );
    assert_eq!(a.shape(), &[2, 3, 4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.all(&[0, -1][..], None);
    assert_eq!(result.shape(), &[3, 4]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), true);
}

#[test]
fn test_floor() {
    let a = Array::from_slice(
        &[
            1.9812179803848267,
            2.5564417839050293,
            -0.2726304531097412,
            -0.07919833064079285,
            0.3617223799228668,
            -0.169716015458107,
            -0.33860182762145996,
            -0.9944641590118408,
            0.3227749466896057,
            -1.6635515689849854,
            -0.23074720799922943,
            1.1218390464782715,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.floor();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_log() {
    let a = Array::from_slice(
        &[
            0.47269025444984436,
            1.957660436630249,
            0.7257681488990784,
            1.8896647691726685,
            0.13170140981674194,
            1.9257241487503052,
            0.6978443264961243,
            0.3046002686023712,
            0.9792980551719666,
            0.25275877118110657,
            1.2376878261566162,
            0.30634790658950806,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.log();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_log2() {
    let a = Array::from_slice(
        &[
            1.3399080038070679,
            0.8390129804611206,
            1.3553991317749023,
            1.4252506494522095,
            1.3026633262634277,
            1.6815094947814941,
            0.44251570105552673,
            0.45319145917892456,
            1.0023398399353027,
            0.5834028124809265,
            1.0060535669326782,
            1.001531958580017,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.log2();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_log10() {
    let a = Array::from_slice(
        &[
            0.9140231609344482,
            0.46055954694747925,
            1.3730783462524414,
            0.778434693813324,
            0.8405736088752747,
            1.1985399723052979,
            1.7540160417556763,
            0.24585458636283875,
            0.6850132942199707,
            1.8687775135040283,
            0.4515070915222168,
            0.4215632677078247,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.log10();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_log1p() {
    let a = Array::from_slice(
        &[
            0.12038002163171768,
            1.647945761680603,
            0.23794081807136536,
            1.7502785921096802,
            0.5283485651016235,
            1.4420909881591797,
            0.4129406809806824,
            1.689857006072998,
            1.0602513551712036,
            1.7814853191375732,
            1.7983895540237427,
            0.36280056834220886,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.log1p();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_reciprocal() {
    let a = Array::from_slice(
        &[
            0.18643225729465485,
            -0.6394457221031189,
            -0.09340199828147888,
            1.6370071172714233,
            0.8672945499420166,
            0.8155528903007507,
            -1.0810774564743042,
            0.7909287810325623,
            1.7393332719802856,
            0.6194468140602112,
            -0.28388431668281555,
            -2.476729393005371,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.reciprocal();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_round() {
    let a = Array::from_slice(
        &[
            0.8368546366691589,
            -0.5947073101997375,
            0.5761411190032959,
            0.46928611397743225,
            -1.1685436964035034,
            0.5238077044487,
            0.7678394317626953,
            -1.8666939735412598,
            -1.0873759984970093,
            1.1785553693771362,
            -0.3664890229701996,
            0.5221207737922668,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.round(None);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_sin() {
    let a = Array::from_slice(
        &[
            0.5861824750900269,
            -1.3517390489578247,
            -1.0172513723373413,
            -1.3139086961746216,
            0.2698175311088562,
            0.09042754769325256,
            0.31873252987861633,
            -0.25611281394958496,
            0.3159833252429962,
            2.352506399154663,
            -1.0938327312469482,
            -0.7900651097297668,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.sin();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_cos() {
    let a = Array::from_slice(
        &[
            -2.0504863262176514,
            -0.7382578253746033,
            0.27834460139274597,
            -0.3207119405269623,
            0.6748946309089661,
            -0.174682155251503,
            1.017793893814087,
            -1.268026351928711,
            0.5847352743148804,
            -0.5649987459182739,
            -0.41867920756340027,
            0.2859664261341095,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.cos();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_sqrt() {
    let a = Array::from_slice(
        &[
            1.9568428993225098,
            0.685381293296814,
            0.6587623357772827,
            0.860242486000061,
            1.7169793844223022,
            0.6948739290237427,
            1.822189450263977,
            0.5336028337478638,
            0.3627924621105194,
            1.6352756023406982,
            0.5411571264266968,
            0.911626398563385,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.sqrt();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_logical_not() {
    let a = Array::from_slice(
        &[
            -0.17269450426101685,
            -1.40074622631073,
            0.1062098890542984,
            -0.483011931180954,
            0.8475610613822937,
            0.8085337281227112,
            -1.9007151126861572,
            0.15547388792037964,
            -0.517548680305481,
            1.1245580911636353,
            1.4066323041915894,
            -0.21171529591083527,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.logical_not();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}

#[test]
fn test_neg() {
    let a = Array::from_slice(
        &[
            -1.6490319967269897,
            0.07788795977830887,
            0.27181097865104675,
            -0.7575350403785706,
            0.7419436573982239,
            -0.8223071694374084,
            -0.07447053492069244,
            -0.9973855018615723,
            1.8180787563323975,
            -0.22467337548732758,
            1.157396912574768,
            0.8813202381134033,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let result = a.neg();
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}

#[test]
fn test_add() {
    let a = Array::from_slice(
        &[
            -0.36629652976989746,
            -1.0177866220474243,
            0.8186221718788147,
            1.3029825687408447,
            -1.450587272644043,
            -0.017227517440915108,
            0.5530365705490112,
            -1.138394832611084,
            0.2674398720264435,
            -0.20283083617687225,
            2.0261807441711426,
            0.5723782777786255,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.834062933921814,
            0.873042643070221,
            -0.04213842749595642,
            -0.09809429198503494,
            1.2934762239456177,
            0.3950510323047638,
            0.7270188927650452,
            -0.29909783601760864,
            -1.3632314205169678,
            0.9710951447486877,
            2.815037727355957,
            -0.7709243297576904,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.add(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}
#[test]
fn test_div() {
    let a = Array::from_slice(
        &[
            0.38671380281448364,
            0.7699702978134155,
            0.367132306098938,
            -0.21045324206352234,
            -2.2902965545654297,
            -0.5580626726150513,
            -0.24682679772377014,
            0.5872678756713867,
            1.6341718435287476,
            -1.0837067365646362,
            -1.2168227434158325,
            -0.010533515363931656,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.438134104013443,
            1.4360758066177368,
            0.20311856269836426,
            -0.9346889853477478,
            -0.0895489975810051,
            0.30119502544403076,
            -0.8271387219429016,
            -0.8076680302619934,
            0.9560771584510803,
            1.6973786354064941,
            0.5240680575370789,
            0.025685308501124382,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.div(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}
#[test]
fn test_eq() {
    let a = Array::from_slice(
        &[
            -0.5438942313194275,
            -1.5493661165237427,
            -0.7553501725196838,
            0.05800102651119232,
            -1.6160151958465576,
            -0.018397705629467964,
            0.26270562410354614,
            1.0434629917144775,
            1.771357774734497,
            0.7572739124298096,
            -1.1063461303710938,
            1.43451988697052,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.10043714940547943,
            8.747761603444815e-05,
            2.0745816230773926,
            0.5260553956031799,
            -0.5813668966293335,
            1.4661006927490234,
            1.8351919651031494,
            -0.632220447063446,
            -0.0065132807940244675,
            -1.5596897602081299,
            0.5176803469657898,
            -3.042736768722534,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.eq(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}
#[test]
fn test_gt() {
    let a = Array::from_slice(
        &[
            1.109818458557129,
            0.5115606784820557,
            0.2698880136013031,
            -0.34322798252105713,
            0.12619230151176453,
            -0.7092453837394714,
            0.4476782977581024,
            -1.9387112855911255,
            0.17117053270339966,
            -0.580110490322113,
            -0.6877068877220154,
            0.07483326643705368,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -1.1622235774993896,
            0.8938366770744324,
            0.35360729694366455,
            -0.44935640692710876,
            -0.8606247901916504,
            -0.559966504573822,
            0.45440417528152466,
            -1.4798665046691895,
            -1.7835367918014526,
            1.5890384912490845,
            -2.5156610012054443,
            -1.1297526359558105,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.gt(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}
#[test]
fn test_ge() {
    let a = Array::from_slice(
        &[
            0.8679897785186768,
            -0.39601898193359375,
            -0.8754256963729858,
            -0.25853583216667175,
            -1.1179475784301758,
            0.03077000379562378,
            0.35615190863609314,
            0.35325995087623596,
            0.3254461884498596,
            -0.16218169033527374,
            0.5564047694206238,
            -0.6579521894454956,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            1.2619661092758179,
            -1.4044148921966553,
            -0.9606491327285767,
            0.3526269197463989,
            -1.2641619443893433,
            0.02976224385201931,
            0.6217265725135803,
            -1.9327300786972046,
            -1.328198790550232,
            2.0281994342803955,
            0.2554958462715149,
            -1.5743142366409302,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.ge(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}
#[test]
fn test_lt() {
    let a = Array::from_slice(
        &[
            -1.1816775798797607,
            -0.3852735161781311,
            1.3235101699829102,
            -1.218072772026062,
            0.5964628458023071,
            1.8713812828063965,
            -1.1662715673446655,
            1.7045704126358032,
            0.7104543447494507,
            -0.5146303176879883,
            0.4570751488208771,
            0.6518914103507996,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.43129947781562805,
            0.29935479164123535,
            1.027870535850525,
            0.24226175248622894,
            0.2663489878177643,
            0.4233114719390869,
            0.208001971244812,
            0.2714795470237732,
            -0.27414798736572266,
            0.2447783499956131,
            -0.7373056411743164,
            -1.6491150856018066,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.lt(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}
#[test]
fn test_le() {
    let a = Array::from_slice(
        &[
            -0.6346555352210999,
            0.9749698638916016,
            -0.40937620401382446,
            1.5237876176834106,
            -0.46759161353111267,
            0.0012050399091094732,
            -0.639621913433075,
            -1.7732588052749634,
            0.21919308602809906,
            -0.09413228929042816,
            -0.8397066593170166,
            -1.507895827293396,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.9036458730697632,
            0.1980796903371811,
            -0.6005244255065918,
            -1.0618571043014526,
            -2.7902908325195312,
            -0.3417641818523407,
            0.11098837107419968,
            1.374802827835083,
            0.6772703528404236,
            0.6020565629005432,
            0.4675977826118469,
            -0.6453197002410889,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.le(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), false);
}
#[test]
fn test_matmul() {
    let a = Array::from_slice(
        &[
            0.5644543170928955,
            0.53565913438797,
            0.13202358782291412,
            0.9969708919525146,
            0.39497870206832886,
            0.7788776159286499,
            0.6896165013313293,
            0.9345514178276062,
            0.9490392208099365,
            0.8345465064048767,
            0.8006559610366821,
            0.2254611998796463,
            0.46025413274765015,
            0.9306052923202515,
            0.45121702551841736,
            0.643183171749115,
            0.15002156794071198,
            0.6772930026054382,
            0.32845234870910645,
            0.8708755373954773,
            0.3550320267677307,
            0.8158174753189087,
            0.20534257590770721,
            0.9970014691352844,
            0.7587500810623169,
            0.509099543094635,
            0.2918161153793335,
            0.7150509357452393,
            0.5373235940933228,
            0.4309633672237396,
            0.3716570734977722,
            0.8676390051841736,
            0.16758479177951813,
            0.7351763248443604,
            0.6713144183158875,
            0.4438798129558563,
            0.179018035531044,
            0.0808340311050415,
            0.9680478572845459,
            0.7585502862930298,
            0.8618626594543457,
            0.9888228178024292,
            0.7460977435112,
            0.7644678950309753,
            0.5961892604827881,
            0.2640388309955597,
            0.6596765518188477,
            0.3083254396915436,
            0.9112212657928467,
            0.666761577129364,
            0.5091676712036133,
            0.8756704926490784,
            0.7400583624839783,
            0.3043052554130554,
            0.3517059087753296,
            0.9821619391441345,
            0.47071564197540283,
            0.1831546425819397,
            0.6991468071937561,
            0.8359447121620178,
            0.03300585597753525,
            0.31737661361694336,
            0.7681633234024048,
            0.8083141446113586,
            0.6035906672477722,
            0.43388664722442627,
            0.3945326507091522,
            0.21458280086517334,
            0.5445002317428589,
            0.8491101264953613,
            0.019669504836201668,
            0.37505829334259033,
            0.5868861079216003,
            0.009655729867517948,
            0.052940305322408676,
            0.678581953048706,
            0.23178249597549438,
            0.957119345664978,
            0.3040018677711487,
            0.4621447026729584,
        ],
        &[10, 8],
    );
    assert_eq!(a.shape(), &[10, 8]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.3716236650943756,
            0.2915474474430084,
            0.13973000645637512,
            0.5133373737335205,
            0.5700627565383911,
            0.37459513545036316,
            0.1691993921995163,
            0.5970609188079834,
            0.1851026713848114,
            0.17812812328338623,
            0.7960672378540039,
            0.9522033929824829,
            0.07208476215600967,
            0.8415893912315369,
            0.6884463429450989,
            0.0841631144285202,
            0.43553876876831055,
            0.9451323747634888,
            0.48222801089286804,
            0.17116683721542358,
            0.4885435104370117,
            0.03728843107819557,
            0.9575812816619873,
            0.38398534059524536,
            0.4447738230228424,
            0.14813834428787231,
            0.5175615549087524,
            0.23212596774101257,
            0.478525847196579,
            0.004961876664310694,
            0.9017253518104553,
            0.7941125631332397,
            0.3600922226905823,
            0.21238012611865997,
            0.710587739944458,
            0.20514780282974243,
            0.41511207818984985,
            0.2917522192001343,
            0.04711759090423584,
            0.986070454120636,
            0.7469810843467712,
            0.1903144270181656,
            0.05432312563061714,
            0.774060845375061,
            0.5720380544662476,
            0.2026350200176239,
            0.3662243187427521,
            0.9381329417228699,
            0.9143192768096924,
            0.7925134301185608,
            0.7957637310028076,
            0.38781893253326416,
            0.45749443769454956,
            0.21553924679756165,
            0.7127785086631775,
            0.9323206543922424,
            0.217558816075325,
            0.02552880346775055,
            0.44116419553756714,
            0.5209165215492249,
            0.14285728335380554,
            0.40187469124794006,
            0.7938836216926575,
            0.09811153262853622,
            0.9681819677352905,
            0.6756588220596313,
            0.3835786283016205,
            0.36976876854896545,
            0.47780749201774597,
            0.7242215275764465,
            0.5714000463485718,
            0.9599099159240723,
            0.7982043623924255,
            0.6378999948501587,
            0.05112574249505997,
            0.25504204630851746,
            0.6991492509841919,
            0.4887217581272125,
            0.20338816940784454,
            0.09912630915641785,
            0.5035086274147034,
            0.10252328962087631,
            0.3670696020126343,
            0.8944761753082275,
            0.06204984337091446,
            0.9915735125541687,
            0.6913406252861023,
            0.7453802227973938,
            0.8660179972648621,
            0.5003693103790283,
            0.4260857105255127,
            0.09190598130226135,
            0.9497912526130676,
            0.020540643483400345,
            0.4589105546474457,
            0.6098330020904541,
            0.9419903755187988,
            0.31817594170570374,
            0.7258408069610596,
            0.3615182340145111,
            0.8528472185134888,
            0.19231082499027252,
            0.7272889614105225,
            0.2556142508983612,
        ],
        &[8, 13],
    );
    assert_eq!(b.shape(), &[8, 13]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.matmul(&b);
    assert_eq!(result.shape(), &[10, 13]);
    assert_eq!(result.dtype(), Dtype::Float32);
}
#[test]
fn test_mul() {
    let a = Array::from_slice(
        &[
            -1.245862603187561,
            0.8100160360336304,
            0.6501981019973755,
            -0.7955822944641113,
            1.8454253673553467,
            0.10830704122781754,
            1.290818214416504,
            1.8223026990890503,
            0.4449128806591034,
            -0.5826029777526855,
            -0.1676967889070511,
            -0.3293173909187317,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -0.5230811834335327,
            0.004948294721543789,
            0.15244922041893005,
            -1.0194649696350098,
            -0.818453848361969,
            1.2491368055343628,
            -1.3931041955947876,
            0.5960668325424194,
            -1.2741854190826416,
            1.1298232078552246,
            0.3789399564266205,
            0.34472474455833435,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.mul(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}
#[test]
fn test_ne() {
    let a = Array::from_slice(
        &[
            -0.5105053782463074,
            0.2772655487060547,
            -0.2786199152469635,
            -0.0174026470631361,
            0.22711126506328583,
            -1.3167717456817627,
            -0.631954550743103,
            -0.36814457178115845,
            0.603740930557251,
            0.27596375346183777,
            -0.5084530115127563,
            -0.2606922686100006,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -1.3256980180740356,
            -0.33018866181373596,
            0.15618255734443665,
            1.2985628843307495,
            -0.3115845322608948,
            -0.9765783548355103,
            0.465000182390213,
            -0.38742074370384216,
            -0.9254618883132935,
            0.31412747502326965,
            1.40082585811615,
            0.46962353587150574,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.ne(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Bool);
    assert_eq!(result.all(None, None).item::<bool>(), true);
}
#[test]
fn test_rem() {
    let a = Array::from_slice(
        &[
            -0.6225845217704773,
            -0.4323368966579437,
            1.0719307661056519,
            -0.9226123690605164,
            0.4543248116970062,
            0.04148188233375549,
            -0.6995946764945984,
            1.09744393825531,
            0.2222602665424347,
            0.34255099296569824,
            0.6407233476638794,
            -0.3312891721725464,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            -1.5230351686477661,
            -0.7027687430381775,
            -0.04068584740161896,
            -0.2927578389644623,
            -1.5422470569610596,
            0.2987465560436249,
            -1.3883453607559204,
            -0.32757413387298584,
            0.003907069563865662,
            -0.5001983642578125,
            -0.7604573369026184,
            1.2499290704727173,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.rem(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}
#[test]
fn test_sub() {
    let a = Array::from_slice(
        &[
            1.035801649093628,
            -0.6771537065505981,
            -0.7336523532867432,
            0.915648877620697,
            0.6524046063423157,
            -0.922706663608551,
            0.4968348443508148,
            0.28466999530792236,
            2.0066237449645996,
            -0.8126611113548279,
            0.11651410907506943,
            -1.3497130870819092,
        ],
        &[4, 3],
    );
    assert_eq!(a.shape(), &[4, 3]);
    assert_eq!(a.dtype(), Dtype::Float32);
    let b = Array::from_slice(
        &[
            0.5046100616455078,
            -0.25621217489242554,
            -0.4517943263053894,
            0.9278560876846313,
            -1.0840870141983032,
            -0.770912230014801,
            -0.22693218290805817,
            -0.8134337663650513,
            -1.222853183746338,
            -1.7389917373657227,
            -1.0739755630493164,
            0.3658639192581177,
        ],
        &[4, 3],
    );
    assert_eq!(b.shape(), &[4, 3]);
    assert_eq!(b.dtype(), Dtype::Float32);
    let result = a.sub(&b);
    assert_eq!(result.shape(), &[4, 3]);
    assert_eq!(result.dtype(), Dtype::Float32);
}
